//============================================================
//
//  title  : 双方向リストクラス [doublyLinkedList.h]
//  Author : 原田 陽央
//   Date  : 2021/10/07
//  Update : 2021/10/13
//
//============================================================
#pragma once


//============================================================
//　インクルード
//============================================================
#include <iostream>
#include <string>
using namespace std;


//============================================================
//　構造体宣言
//============================================================
// 成績データ構造体
struct RecordData
{
	int score;        // スコア
	string userName;  // ユーザー名
};


//============================================================
//　クラス宣言
//============================================================
class DoublyLinkedList
{
public:
	//============================================================
	// 《 ノード構造体 》
	struct Node
	{
		Node* prevPtr;         // 前のノードへのポインタ
		Node* nextPtr;         // 次のノードへのポインタ

		RecordData recordData; // 成績データ
	};
	//============================================================

private:

	Node* thisPtr; // ノードへのポインタ(前へは末尾に次へは先頭につなぐ)

public:
	//============================================================
	// 《 コンストイテレータクラス 》
	class ConstIterator
	{
	protected:
		Node* itePtr;

	public:
		//------------------------------------------------------------
		//【 コンストラクタ 】
		//------------------------------------------------------------
		ConstIterator();

		//------------------------------------------------------------
		//【 引数付きコンストラクタ 】
		//------------------------------------------------------------
		ConstIterator(Node* thisPtr);

		//------------------------------------------------------------
		//【 デストラクタ 】
		//------------------------------------------------------------
		virtual ~ConstIterator();

		//------------------------------------------------------------
		//【 リストの末尾に向かって一つ進める 】
		//------------------------------------------------------------
		ConstIterator& operator++();
		
		//------------------------------------------------------------
		//【 リストの先頭に向かって一つ進める 】
		//------------------------------------------------------------
		ConstIterator& operator--();

		//------------------------------------------------------------
		//【 == 比較のオペレーター 】
		// ite：比較するイテレータオブジェクト
		//------------------------------------------------------------
		bool operator ==(const ConstIterator &ite) const;

		//------------------------------------------------------------
        //【 == 比較のオペレーター 】
        // ite：比較するイテレータオブジェクト
        //------------------------------------------------------------
		bool operator !=(const ConstIterator &ite) const;

		//------------------------------------------------------------
		//【 イテレータの指す要素を取得する 】
		//------------------------------------------------------------		
		const RecordData& GetConstData();

	};
	//============================================================

	//============================================================
	//　《 イテレータクラス 》
	class Iterator : public ConstIterator
	{
	public:
		//------------------------------------------------------------
		//【 コンストラクタ 】
		//------------------------------------------------------------
		Iterator();

		//------------------------------------------------------------
		//【 引数付きコンストラクタ 】
		//------------------------------------------------------------
		Iterator(Node* thisPtr);

		//------------------------------------------------------------
		//【 デストラクタ 】
		//------------------------------------------------------------
		~Iterator();

		//------------------------------------------------------------
		//【 リストの末尾に向かって一つ進める 】
		//------------------------------------------------------------
		//Iterator& operator++();

		//------------------------------------------------------------
		//【 リストの先頭に向かって一つ進める 】
		//------------------------------------------------------------
		//Iterator& operator--();

		//------------------------------------------------------------
	    //【 イテレータの指す要素を取得する 】
	    //------------------------------------------------------------
		RecordData& GetData();
	};
	//============================================================


	//============================================================
	//　《 双方向リストクラス 》
	//------------------------------------------------------------
	//【 コンストラクタ 】
	//------------------------------------------------------------
	DoublyLinkedList();

	//------------------------------------------------------------
	//【 デストラクタ 】
	//------------------------------------------------------------
	~DoublyLinkedList();

	//------------------------------------------------------------
    //【 データの数の取得 】
    //　return：データの数
    //------------------------------------------------------------
	int GetDataCount(void);

	//------------------------------------------------------------
    //【 データの挿入 】
    //　addIterator：追加するイテレータの情報
    //------------------------------------------------------------
	void Insert(Iterator addIterator);

	//------------------------------------------------------------
    //【 データの挿入 】
    //　addIterator：追加するイテレータの情報
    //------------------------------------------------------------
	void Remove(Iterator removeIterator);
	
	//------------------------------------------------------------
	//【 先頭イテレータ取得 】
	//　return：先頭のイテレータ
	//------------------------------------------------------------
	Iterator GetTopIterator();

	//------------------------------------------------------------
	//【 先頭コンストイテレータ取得 】
	//　return：先頭コンストイテレータ
	//------------------------------------------------------------
	const ConstIterator GetTopConstIterator();

	//------------------------------------------------------------
	//【 末尾イテレータ取得 】
	//　return：末尾イテレータ
	//------------------------------------------------------------
	Iterator GetEndIterator();

	//------------------------------------------------------------
	//【 末尾コンストイテレータ取得 】
	//　return：末尾コンストイテレータ
	//------------------------------------------------------------
	const ConstIterator GetEndConstIterator();
	//============================================================
};